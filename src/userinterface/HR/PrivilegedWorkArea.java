/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package userinterface.HR;

import Business.ApplicationWorkQueue.ApplicantWorkRequest;
import Business.ApplicationWorkQueue.HRWorkRequest;
import Business.ApplicationWorkQueue.WorkRequest;
import Business.EcoSystem;
import Business.Enterprise.Enterprise;
import Business.Jobs.Job;
import Business.Network.Network;
import Business.Organization.CompanyOrg;
import Business.Organization.Organization;
import Business.Role.CTORole;
import Business.Role.NGOManagerRole;
import Business.Role.Role;
import Business.UserAccount.UserAccount;
import java.awt.CardLayout;
import java.awt.Component;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Tushar
 */
public class PrivilegedWorkArea extends javax.swing.JPanel {

    /**
     * Creates new form HRPrivilegedWorkArea
     */
    JPanel userprocesscontainer;
    EcoSystem business;
    CompanyOrg organization;
    UserAccount userAccount;

    PrivilegedWorkArea(JPanel userProcessContainer, EcoSystem business, CompanyOrg organization, UserAccount userAccount) {
        initComponents();
        this.userprocesscontainer = userProcessContainer;
        this.business = business;
        this.organization = organization;
        this.userAccount = userAccount;
        populateWorkQueueTable();
        populateCTOTable();
        populateHRWorkRequestTable();
    }

    public void populateWorkQueueTable() {
        DefaultTableModel model = (DefaultTableModel) requestTable.getModel();

        model.setRowCount(0);

        for (WorkRequest work : organization.getWorkQueue().getWorkRequestList()) {
            if (work instanceof ApplicantWorkRequest) {
                Object[] row = new Object[5];
                row[0] = work;
                row[1] = ((ApplicantWorkRequest) work).getApplicationID();
                row[2] = ((ApplicantWorkRequest) work).getJob().getJobPosition();
                row[3] = ((ApplicantWorkRequest) work).getSender();
                model.addRow(row);
            }
        }
    }

    public void populateCTOTable() {
        DefaultTableModel model = (DefaultTableModel) tblCto.getModel();

        model.setRowCount(0);

        for (UserAccount useraccount : organization.getUserAccountDirectory().getUserAccountList()) {
            if (useraccount.getRole() instanceof CTORole) {
                Object[] row = new Object[4];
                row[0] = useraccount.getRole();
                row[1] = useraccount;
                model.addRow(row);
            }
        }
    }

    public void populateHRWorkRequestTable() {
        DefaultTableModel model = (DefaultTableModel) hrrequestTable.getModel();
        model.setRowCount(0);
        outer:
        for (UserAccount useraccount : organization.getUserAccountDirectory().getUserAccountList()) {
            if (useraccount.getRole() instanceof CTORole) {
                for (WorkRequest work : useraccount.getWorkQueue().getWorkRequestList()) {

                    if (work instanceof HRWorkRequest) {
                        Object[] row = new Object[6];
                        row[0] = work;
                        row[1] = ((HRWorkRequest) work).getApplicationID();
                        row[2] = ((HRWorkRequest) work).getJob().getJobPosition();
                        row[3] = ((HRWorkRequest) work).getAccount();
                        row[4] = useraccount.getEmployee().getName();
                        model.addRow(row);

                    }

                }
//              
            }
        }

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane2 = new javax.swing.JScrollPane();
        tblCto = new javax.swing.JTable();
        btnAssign = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        requestTable = new javax.swing.JTable();
        jScrollPane4 = new javax.swing.JScrollPane();
        hrrequestTable = new javax.swing.JTable();
        btnDisplay = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        backBtn = new javax.swing.JButton();

        setBackground(new java.awt.Color(0, 0, 0));
        setForeground(new java.awt.Color(255, 255, 255));

        tblCto.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Role", "CTO Name"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(tblCto);

        btnAssign.setText("Assign for Interview");
        btnAssign.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAssignActionPerformed(evt);
            }
        });

        jLabel1.setBackground(new java.awt.Color(0, 0, 0));
        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Applications");

        jLabel2.setBackground(new java.awt.Color(0, 0, 0));
        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("Interviewing Officer");

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("HR Work Area for Privileged");

        requestTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Application Status", "Application ID", "Job Position", "Applicant Name"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane3.setViewportView(requestTable);

        hrrequestTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Application Status", "Application ID", "Job Position", "Applicant Name", "Assigned to"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane4.setViewportView(hrrequestTable);

        btnDisplay.setText("Dispay result to Applicant");
        btnDisplay.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDisplayActionPerformed(evt);
            }
        });

        jLabel5.setBackground(new java.awt.Color(0, 0, 0));
        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(255, 255, 255));
        jLabel5.setText("HR Work Queue ");

        backBtn.setText("<<- Back");
        backBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 407, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 426, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnAssign)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(btnDisplay)
                                    .addComponent(backBtn))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 155, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 604, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addGap(537, 537, 537))
            .addGroup(layout.createSequentialGroup()
                .addGap(210, 210, 210)
                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 283, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(86, 86, 86))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addComponent(jLabel3)
                .addGap(52, 52, 52)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnAssign)
                .addGap(52, 52, 52)
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(backBtn)
                        .addGap(114, 114, 114)
                        .addComponent(btnDisplay))
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(370, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnAssignActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAssignActionPerformed

        int selectedApprow = requestTable.getSelectedRow();
        int selectedCtorow = tblCto.getSelectedRow();
        Role role = (Role) (CTORole) tblCto.getValueAt(selectedCtorow, 0);
        if (selectedApprow>=0 && selectedCtorow>=0) {
            outer:
            for (Network network : business.getNetworkList()) {
                for (Enterprise enterprise : network.getEnterpriseDirectory().getEnterpriseList()) {
                    for (Organization org : enterprise.getOrganizationDirectory().getOrganizationList()) {
                        for (UserAccount useraccount : org.getUserAccountDirectory().getUserAccountList()) {
                            if (useraccount.getRole() instanceof CTORole && useraccount.getRole().equals(role) && useraccount.getEmployee().getName().equals(String.valueOf(tblCto.getValueAt(selectedCtorow, 1)))) {

                                HRWorkRequest hRWorkRequest = new HRWorkRequest();
                                hRWorkRequest.setApplicant(((ApplicantWorkRequest) requestTable.getValueAt(selectedApprow, 0)).getApplicant());
                                hRWorkRequest.setJob(((ApplicantWorkRequest) requestTable.getValueAt(selectedApprow, 0)).getJob());
                                hRWorkRequest.setApplicationID(((ApplicantWorkRequest) requestTable.getValueAt(selectedApprow, 0)).getApplicationID());
                                //hRWorkRequest.setRole(role);
                                hRWorkRequest.setStatus("Interview Scheduled");
                                hRWorkRequest.setAccount(((ApplicantWorkRequest) requestTable.getValueAt(selectedApprow, 0)).getSender());
                                organization.getWorkQueue().getWorkRequestList().add(hRWorkRequest);
                                useraccount.getWorkQueue().getWorkRequestList().add(hRWorkRequest);
                                business.getWorkQueue().getWorkRequestList().add(hRWorkRequest);
                                populateHRWorkRequestTable();
                                break outer;
                            }
                        }
                    }
                }
            }
            JOptionPane.showMessageDialog(btnAssign, "Assigned Succesfuly");
        }
        else
            JOptionPane.showMessageDialog(btnAssign, "Please select valid application and valid Cto");
    }//GEN-LAST:event_btnAssignActionPerformed

    private void btnDisplayActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDisplayActionPerformed
        int selectedDisplay = hrrequestTable.getSelectedRow();
        if(selectedDisplay>=0)
        {
        HRWorkRequest hrreRequest = (HRWorkRequest) hrrequestTable.getValueAt(selectedDisplay, 0);
        outer:
        for (UserAccount useraccount : organization.getUserAccountDirectory().getUserAccountList()) {
            for (WorkRequest work : organization.getWorkQueue().getWorkRequestList()) {
                if (work instanceof ApplicantWorkRequest && hrreRequest.getAccount()== ((ApplicantWorkRequest) work).getSender() && hrreRequest.getJob().equals(((ApplicantWorkRequest) work).getJob())) {
                    if (hrreRequest.getStatus().equals("Rejected")) {
                        work.setStatus("Better luck next time");
                        String host = "smtp.gmail.com";
                        String port = "587";
                        String mailFrom = "guptatushar1907@gmail.com";
                        String password = "wanttobetushar";
                        String mailTo = work.getEmail();
                        String subject = "Hello my friend";
                        String message = "<i>Greetings from HR</i><br>";
                        message += "<b>Wish you a nice day!</b><br>";
                        message += "Unfortunately <br>";
                        message += work.getName();
                        message += " you are not selected for Job Position: <br>";
                        message += hrreRequest.getJob();
                        HtmlEmailSender mailer = new HtmlEmailSender();

                        try {
                            mailer.sendHtmlEmail(host, port, mailFrom, password, mailTo,
                                    subject, message);
                            System.out.println("Email sent.");
                        } catch (Exception ex) {
                            System.out.println("Failed to sent email.");
                            ex.printStackTrace();
                        }

                    } else {
                        work.setStatus("Congratulations");
                        
                        String host = "smtp.gmail.com";
                        String port = "587";
                        String mailFrom = "guptatushar1907@gmail.com";
                        String password = "wanttobetushar";
                        String mailTo = work.getEmail();
                        String subject = "Hello my friend";
                        String message = "<i>Greetings from HR</i><br>";
                        message += "<b>Wish you a nice day!</b><br>";                        
                        //message += work.getName();
                        message += "You have has been selected for Job Position: <br>";
                        message += hrreRequest.getJob();
                        HtmlEmailSender mailer = new HtmlEmailSender();

                        try {
                            mailer.sendHtmlEmail(host, port, mailFrom, password, mailTo,
                                    subject, message);
                            System.out.println("Email sent.");
                        } catch (Exception ex) {
                            System.out.println("Failed to sent email.");
                            ex.printStackTrace();
                        }
                    }
                    break outer;

                }
            }
        }
        populateWorkQueueTable();
        JOptionPane.showMessageDialog(btnDisplay, "Sent succesfully to applicant emailID and portal");
        }
        else
            JOptionPane.showMessageDialog(btnDisplay, "Cant send this message,Please select a HR Work Queue to sent the status to applicant");
    }//GEN-LAST:event_btnDisplayActionPerformed

    private void backBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backBtnActionPerformed
        // TODO add your handling code here:
        userprocesscontainer.remove(this);
        CardLayout layout = (CardLayout) userprocesscontainer.getLayout();
        layout.previous(userprocesscontainer);
        
    }//GEN-LAST:event_backBtnActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton backBtn;
    private javax.swing.JButton btnAssign;
    private javax.swing.JButton btnDisplay;
    private javax.swing.JTable hrrequestTable;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JTable requestTable;
    private javax.swing.JTable tblCto;
    // End of variables declaration//GEN-END:variables
}
